// do not edit, generated by ../scripts/make-descriptors.js hasakDescriptors

/* eslint no-bitwise: ["error", { "allow": ["&","|","<<",'>>',"~"] }] */
// sign extend an arbitrary number of bits
// thanks to stackexchange
function uncomplement(val, bitwidth) {
  const isnegative = val & (1 << (bitwidth - 1));
  const boundary = (1 << bitwidth);
  const minval = -boundary;
  const mask = boundary - 1;
  return isnegative ? minval + (val & mask) : val;
}

// sign extend a 14 bit number
function signextend14(val) { return uncomplement(val, 14) }

// mask an int to 14 bits
function mask14(val) { return val&0x3fff }
  
export const hasakDescriptors = {
    masterVolume: { // KYRP_VOLUME
    get() { return signextend14(this.getnrpn(3))/10 },
    set(v) { return this.setnrpn(3, mask14(Math.round(10*v))) }
  },
  inputSelect: { // KYRP_INPUT_SELECT
    get() { return this.getnrpn(4) },
    set(v) { return this.setnrpn(4, v) }
  },
  inputSelects: { // KYRV_INPUT_*
    get() { return [
{ value: 0, label: "Mic", title: "input select microphone" },
{ value: 1, label: "LineIn", title: "input select line in" }] }
  },
  inputLevel: { // KYRP_INPUT_LEVEL
    get() { return signextend14(this.getnrpn(5))/10 },
    set(v) { return this.setnrpn(5, mask14(Math.round(10*v))) }
  },
  buttonLevel0: { // KYRP_BUTTON_0
    get() { return signextend14(this.getnrpn(6)) },
    set(v) { return this.setnrpn(6, mask14(v)) }
  },
  buttonLevel1: { // KYRP_BUTTON_1
    get() { return signextend14(this.getnrpn(7)) },
    set(v) { return this.setnrpn(7, mask14(v)) }
  },
  buttonLevel2: { // KYRP_BUTTON_2
    get() { return signextend14(this.getnrpn(8)) },
    set(v) { return this.setnrpn(8, mask14(v)) }
  },
  buttonLevel3: { // KYRP_BUTTON_3
    get() { return signextend14(this.getnrpn(9)) },
    set(v) { return this.setnrpn(9, mask14(v)) }
  },
  buttonLevel4: { // KYRP_BUTTON_4
    get() { return signextend14(this.getnrpn(10)) },
    set(v) { return this.setnrpn(10, mask14(v)) }
  },
  externalPTTRequire: { // KYRP_PTT_ENABLE
    get() { return Boolean(this.getnrpn(11)) },
    set(v) { return this.setnrpn(11, Number(v)) }
  },
  iqModeSelect: { // KYRP_IQ_ENABLE
    get() { return this.getnrpn(12) },
    set(v) { return this.setnrpn(12, v) }
  },
  iqModeSelects: { // KYRV_IQ_*
    get() { return [
{ value: 0, label: "None", title: "no IQ" },
{ value: 1, label: "LSB", title: "IQ for lower sideband" },
{ value: 2, label: "USB", title: "IQ for upper sideband" }] }
  },
  iqAdjustPhase: { // KYRP_IQ_ADJUST
    get() { return signextend14(this.getnrpn(13)) },
    set(v) { return this.setnrpn(13, mask14(v)) }
  },
  iqAdjustBalance: { // KYRP_IQ_BALANCE
    get() { return signextend14(this.getnrpn(16)) },
    set(v) { return this.setnrpn(16, mask14(v)) }
  },
  txEnable: { // KYRP_TX_ENABLE
    get() { return Boolean(this.getnrpn(14)) },
    set(v) { return this.setnrpn(14, Number(v)) }
  },
  sidetoneEnable: { // KYRP_ST_ENABLE
    get() { return Boolean(this.getnrpn(15)) },
    set(v) { return this.setnrpn(15, Number(v)) }
  },
  sidetonePan: { // KYRP_ST_PAN
    get() { return signextend14(this.getnrpn(17)) },
    set(v) { return this.setnrpn(17, mask14(v)) }
  },
  outputEnable: { // KYRP_OUT_ENABLE
    get() { return this.getnrpn(18) },
    set(v) { return this.setnrpn(18, v) }
  },
  remoteKey: { // KYRP_REMOTE_KEY
    get() { return Boolean(this.getnrpn(19)) },
    set(v) { return this.setnrpn(19, Number(v)) }
  },
  debouncePeriod: { // KYRP_DEBOUNCE
    get() { return (1000*this.getnrpn(20)/48000).toFixed(1) },
    set(v) { return this.setnrpn(20, mask14(Math.round(48000*v/1000))) }
  },
  pttHeadTime: { // KYRP_HEAD_TIME
    get() { return (1000*this.getnrpn(21)/48000).toFixed(1) },
    set(v) { return this.setnrpn(21, mask14(Math.round(48000*v/1000))) }
  },
  pttTailTime: { // KYRP_TAIL_TIME
    get() { return (1000*this.getnrpn(22)/48000).toFixed(1) },
    set(v) { return this.setnrpn(22, mask14(Math.round(48000*v/1000))) }
  },
  pttHangTime: { // KYRP_HANG_TIME
    get() { return this.getnrpn(23) },
    set(v) { return this.setnrpn(23, v) }
  },
  keyerRiseTime: { // KYRP_RISE_TIME
    get() { return (1000*this.getnrpn(24)/48000).toFixed(1) },
    set(v) { return this.setnrpn(24, mask14(Math.round(48000*v/1000))) }
  },
  keyerFallTime: { // KYRP_FALL_TIME
    get() { return (1000*this.getnrpn(25)/48000).toFixed(1) },
    set(v) { return this.setnrpn(25, mask14(Math.round(48000*v/1000))) }
  },
  keyerRiseRamp: { // KYRP_RISE_RAMP
    get() { return this.getnrpn(26) },
    set(v) { return this.setnrpn(26, v) }
  },
  keyerFallRamp: { // KYRP_FALL_RAMP
    get() { return this.getnrpn(27) },
    set(v) { return this.setnrpn(27, v) }
  },
  keyerRamps: { // KYRV_RAMP_*
    get() { return [
{ value: 0, label: "Hann", title: "ramp from Hann window function, raised cosine" },
{ value: 1, label: "Blackman Harris", title: "ramp from Blackman Harris window function" },
{ value: 2, label: "Linear", title: "linear ramp, for comparison" }] }
  },
  paddleMode: { // KYRP_PAD_MODE
    get() { return this.getnrpn(28) },
    set(v) { return this.setnrpn(28, v) }
  },
  paddleModes: { // KYRV_MODE_*
    get() { return [
{ value: 0, label: "A", title: "paddle keyer iambic mode A" },
{ value: 1, label: "B", title: "paddle keyer iambic mode B" },
{ value: 2, label: "S", title: "paddle keyer bug mode" }] }
  },
  paddleSwapped: { // KYRP_PAD_SWAP
    get() { return Boolean(this.getnrpn(29)) },
    set(v) { return this.setnrpn(29, Number(v)) }
  },
  paddleAdapter: { // KYRP_PAD_ADAPT
    get() { return this.getnrpn(30) },
    set(v) { return this.setnrpn(30, v) }
  },
  paddleAdapters: { // KYRV_ADAPT_*
    get() { return [
{ value: 0, label: "Normal", title: "paddle keyer unmodified" },
{ value: 1, label: "Ultimatic", title: "paddle keyer modified to produce ultimatic keyer" },
{ value: 2, label: "Single", title: "paddle keyer modified to simulate single lever paddle" }] }
  },
  autoLetterSpace: { // KYRP_AUTO_ILS
    get() { return Boolean(this.getnrpn(31)) },
    set(v) { return this.setnrpn(31, Number(v)) }
  },
  autoWordSpace: { // KYRP_AUTO_IWS
    get() { return Boolean(this.getnrpn(32)) },
    set(v) { return this.setnrpn(32, Number(v)) }
  },
  paddleKeyer: { // KYRP_PAD_KEYER
    get() { return this.getnrpn(33) },
    set(v) { return this.setnrpn(33, v) }
  },
  paddleKeyers: { // KYRV_KEYER_*
    get() { return [
{ value: 0, label: "ad5dz", title: "paddle keyer algorithm by ad5dz" },
{ value: 1, label: "k1el", title: "paddle keyer algorithm by k1el" },
{ value: 2, label: "nd7pa", title: "paddle keyer algorithm by nd7pa" },
{ value: 3, label: "vk6ph", title: "paddle keyer algorithm by vk6ph" }] }
  },
  channelCC: { // KYRP_CHAN_CC
    get() { return this.getnrpn(34) },
    set(v) { return this.setnrpn(34, v) }
  },
  channelNote: { // KYRP_CHAN_NOTE
    get() { return this.getnrpn(35) },
    set(v) { return this.setnrpn(35, v) }
  },
  channelNrpn: { // KYRP_CHAN_NRPN
    get() { return this.getnrpn(36) },
    set(v) { return this.setnrpn(36, v) }
  },
  noteKeyOut: { // KYRP_NOTE_KEY_OUT
    get() { return this.getnrpn(37) },
    set(v) { return this.setnrpn(37, v) }
  },
  notePTTOut: { // KYRP_NOTE_PTT_OUT
    get() { return this.getnrpn(38) },
    set(v) { return this.setnrpn(38, v) }
  },
  noteTune: { // KYRP_NOTE_TUNE
    get() { return this.getnrpn(39) },
    set(v) { return this.setnrpn(39, v) }
  },
  noteLeftPaddle: { // KYRP_NOTE_L_PAD
    get() { return this.getnrpn(40) },
    set(v) { return this.setnrpn(40, v) }
  },
  noteRightPaddle: { // KYRP_NOTE_R_PAD
    get() { return this.getnrpn(41) },
    set(v) { return this.setnrpn(41, v) }
  },
  noteStraightKey: { // KYRP_NOTE_S_KEY
    get() { return this.getnrpn(42) },
    set(v) { return this.setnrpn(42, v) }
  },
  noteExternalPTT: { // KYRP_NOTE_EXT_PTT
    get() { return this.getnrpn(43) },
    set(v) { return this.setnrpn(43, v) }
  },
  noteEnable: { // KYRP_NOTE_ENABLE
    get() { return this.getnrpn(44) },
    set(v) { return this.setnrpn(44, v) }
  },
  noteEnables: { // KYRV_NOTE_*
    get() { return [
{ value: 0, label: "KeyOut", title: "note for key/ptt key output" },
{ value: 1, label: "PttOut", title: "note for key/ptt ptt output" },
{ value: 2, label: "Tune", title: "note to key tune signal" },
{ value: 3, label: "LPad", title: "note for left paddle switch input" },
{ value: 4, label: "RPad", title: "note for right paddle switch input" },
{ value: 5, label: "SKey", title: "note for straight key switch input" },
{ value: 6, label: "ExtPtt", title: "note for external ptt switch input" }] }
  },
  adcEnable: { // KYRP_ADC_ENABLE
    get() { return Boolean(this.getnrpn(50)) },
    set(v) { return this.setnrpn(50, Number(v)) }
  },
  adcControls: { // KYRV_ADC_*
    get() { return [
{ value: 0, label: "None", title: "pot controls nothing" },
{ value: 3, label: "Volume", title: "pot controls master volume" },
{ value: 140, label: "Level", title: "pot controls sidetone level" },
{ value: 139, label: "Tone", title: "pot controls sidetone pitch" },
{ value: 141, label: "Speed", title: "pot controls keyer speed" }] }
  },
  adc0Control: { // KYRP_ADC0_CONTROL
    get() { return this.getnrpn(45) },
    set(v) { return this.setnrpn(45, v) }
  },
  adc1Control: { // KYRP_ADC1_CONTROL
    get() { return this.getnrpn(46) },
    set(v) { return this.setnrpn(46, v) }
  },
  adc2Control: { // KYRP_ADC2_CONTROL
    get() { return this.getnrpn(47) },
    set(v) { return this.setnrpn(47, v) }
  },
  adc3Control: { // KYRP_ADC4_CONTROL
    get() { return this.getnrpn(49) },
    set(v) { return this.setnrpn(49, v) }
  },
  adc4Control: { // KYRP_ADC3_CONTROL
    get() { return this.getnrpn(48) },
    set(v) { return this.setnrpn(48, v) }
  },
  keyerTone: { // KYRP_TONE
    get() { return this.getnrpn(139)/10 },
    set(v) { return this.setnrpn(139, Math.floor(10*v)) }
  },
  keyerLevel: { // KYRP_LEVEL
    get() { return signextend14(this.getnrpn(140))/10 },
    set(v) { return this.setnrpn(140, mask14(Math.round(10*v))) }
  },
  keyerSpeed: { // KYRP_SPEED
    get() { return this.getnrpn(141) },
    set(v) { return this.setnrpn(141, v) }
  },
  keyerWeight: { // KYRP_WEIGHT
    get() { return this.getnrpn(142) },
    set(v) { return this.setnrpn(142, v) }
  },
  keyerRatio: { // KYRP_RATIO
    get() { return this.getnrpn(143) },
    set(v) { return this.setnrpn(143, v) }
  },
  keyerFarnsworth: { // KYRP_FARNS
    get() { return this.getnrpn(144) },
    set(v) { return this.setnrpn(144, v) }
  },
  keyerCompensation: { // KYRP_COMP
    get() { return (1000*signextend14(this.getnrpn(145))/48000).toFixed(1) },
    set(v) { return this.setnrpn(145, mask14(Math.round(48000*v/1000))) }
  },
  keyerSpeedFraction: { // KYRP_SPEED_FRAC
    get() { return this.getnrpn(146) },
    set(v) { return this.setnrpn(146, v) }
  },
  keyerIdentifier: { // KYRP_ID_KEYER
    get() { return this.getnrpn(1) }
  },
  keyerVersion: { // KYRP_ID_VERSION
    get() { return this.getnrpn(2) }
  },
  nrpnSize: { // KYRP_NRPN_SIZE
    get() { return this.getnrpn(3000) }
  },
  messageSize: { // KYRP_MSG_SIZE
    get() { return this.getnrpn(3001) }
  },
  sampleRate: { // KYRP_SAMPLE_RATE
    get() { return this.getnrpn(3002) }
  },
  eepromSize: { // KYRP_EEPROM_LENGTH
    get() { return this.getnrpn(3003) }
  },
  identifyCPU: { // KYRP_ID_CPU
    get() { return this.getnrpn(3004) }
  },
  identifyCodec: { // KYRP_ID_CODEC
    get() { return this.getnrpn(3005) }
  },
  nothing: { // KYRP_NOTHING
    // KYRP_NOTHING has no nrpn

  },
  echoAll: { // KYRP_ECHO_ALL
    get() { return this.getnrpn(2003) }
  },
  voice: { // null
    get() { return this._voice },
    set(v) { this._voice = v }
  },
  voices: { // null
    get() { return this._voices }
  },
  mixer: { // null
    get() { return this._mixer },
    set(v) { this._mixer = v }
  },
  mixers: { // null
    get() { return this._mixers }
  },
  mixerValue: { // null
    // no hasakProperty map

  },
  code: { // null
    get() { return this._code },
    set(v) { this._code = v }
  },
  codes: { // null
    get() { return this._codes }
  },
  codeValue: { // null
    // no hasakProperty map

  }
};
// do not edit, generated by ../scripts/make-descriptors.js hasakDescriptors
